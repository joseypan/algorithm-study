// 树和二叉树全面总结
// 学习链接：https://juejin.cn/post/7065513748789723150
// 一、概念及定义
// 1、树
//   一个根节点向下发散出不同的节点，一个节点下面留着几个线叫做度，而下面没有了节点就称为叶子
//   同一层的叫兄弟节点，下一层的叫孩子节点，有几代人就有几个层级，层次最大值叫做这个家族的高度，生的孩子数目最多的叫做这个家族的度
// 2、二叉树
//   二叉树字面意思就是一个树只能分两个叉。左边的叉叫做左孩子，右边的叉叫做右孩子
//   官方术语：满足每个节点度不大于2，孩子节点次序确定的树
// 3、满二叉树
//   满二叉树就是每一层都是最大的节点，不能有空
// 4、完全二叉树
//   4.1节点按照编号从左到右依次构建二叉树，不存在无左孩子，却有右孩子的情况
//   4.2满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树

// 二、二叉树的性质
// 1、层结点
//   在二叉树的第i层上最多有2^{i-1}个结点(i>=1)
// 2、总结点
//   深度为k的二叉树最多有2^{k}-1个结点(k>=1)
// 3、深度
//   具有n个节点的完全二叉树的深度为|log2 n|+1
// 4、节点树
//   对于任意一棵二叉树，度为0的节点数等于度为2的节点数+1
// 5、孩子节点
//   节点为i双亲节点为i/2向下取整，左孩子2*i,右孩子2*i+1

// 三、二叉树的遍历
// 1、先序遍历
//   遍历顺序：根节点->左子数->右子树
//   先序遍历就是从根节点开始，围绕二叉树的外圈开始跑（遇到缝隙就钻进去），按照顺序输出序列
// const preOrder = ()=>{
//   if(root !== null){
// /*     访问根节点 */
//     visit(root->data)
// /*     先序遍历左子树 */
//     preOrder(root -> LChild)
// /*     先序遍历右子树 */
//     preOrder(root -> RChild)
//   }
// }
// 2、中序遍历
//   遍历顺序：左子树->根节点->右子树
//   中序遍历就像投影仪一样，将二叉树从最左侧到最右侧一次投影到同一水平线上面，得到的从左到右的相关序列就是二叉树的中序遍历
// const inOrder =()=>{
//   if(root !== null){
//     inOrder(root->LChild);
//     visit(root->data);
//     inOrder(root->RChild);
//   }
// }
// 3、后序遍历
//   遍历顺序：左子树->右子树->根节点
//   后序遍历也是按照先序遍历的顺序输出，不过后序遍历就像剪葡萄，只能一个个剪，不能让超过一个1个的葡萄一起掉下来，那就错了。
// const postOrder = ()=>{
//   if(root !== null){
//     postOrder(root->LChild);
//     postOrder(root->RChild);
//     visit(root->data)
//   }
// }
// 4、层次遍历
//   算法讲解就是一层一层的从左至右输出
