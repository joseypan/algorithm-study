// 学习js中的位运算
// 与运算：&
// 2个数进行与运算时，就是将这2个数的二进制进行与操作，只有当2个数对应的位都为1，该位运算结果为1，否则运算结果为0
// 或运算：|
// 2个数进行或运算时，就是将这2个数的二进制进行或操作，只要2个数对应的位有一个为1，该位运算结果为1，否则运算结果为0
// 异或运算：^
// 2个数进行异或运算时，就是将这2个数的二进制进行异或操作，只要2个数对应的位相同，该位运算结果为0，否则运算结果为1
// 参考资料：https://www.jianshu.com/p/1d52c7b52250
// 背景：在了解位运算之前，必须先了解一下什么是原码，反码和补码，以及二进制与十进制的转换
// 原码：
//   一个数在计算机中以二进制的形式存在的，其中第一位存放符号，正数为0，负数为1，原码就是用第一位存放符号的二进制数值。例如2的原码为00000010，-2的原码为10000010
// 反码：
//   正数的反码是它本身，负数的反码是在其原码的基础上，符号位不变，其余各位取反
//   例如：
//     +3 ===> 00000011原 ===> 00000011反
//     -3 ===> 10000011原 ===> 11111100反
//   可见如果一个反码表示的是负数，并不能直观的看出它的数值，通常要将其转换成原码再计算
// 补码：
//   正数的补码是它本身，负数的补码是在其原码基础上，符号位不变，其余各位取反，最后+1（即负数的补码为在其反码的基础上+1）
//   例如：
//     +3 ===> 00000011原 ===> 00000011反 ===> 00000011补
//     -3 ===> 10000011原 ===> 11111100反 ===> 11111101补
//   可见对于负数，补码的表示方式也是让人无法直观的看出其数值的，通常也需要转换成原码再计算
// 正整数十进制转二进制
//   正整数的十进制转二进制的方法为将一个十进制数除以2，得到的商再除以2，以此类推直到商为1或0为止，倒序取得除得的余数，即为转换所得的二进制数
// 负整数十进制转二进制
//   负整数的十进制转二进制，先将该负整数对应的正整数转为二进制，然后对其取反再+1，即补码的形式
// 十进制小数转二进制
//   十进制小数转二进制的方法为乘2取整，对十进制的小数部分乘2，得到的整数部分即是相应的二进制码数，然后继续对得到的小数部分乘2，如此不断重复。直到小数部分为0或达到精度要求为止，顺序取得每次的整数部分，即是该十进制小数的二进制表示
//   例如：
//     0.8125转为二进制
//     0.8125*2 = 1.625 整数部分是1
//     0.625*2 = 1.25 整数部分是1
//     0.25*2 = 0.5 整数部分是1
//     0.5*2 =1 整数部分是1
//     即0.8125的二进制是0.1101
// 按位运算符有6个
//   &：按位与
//   |：按位或
//   ^：按位异或
//   ~：按位取反
//   >>：右移
//   <<：左移
// 1、&运算
//   将运算数以二进制表示，对应位都为1，则结果为1，否则为0
//   举例：
/*
 * 描述：如果传入的数是奇数，那么该数转成二进制数的时候，最后一位一定是1，如果是偶数则最后一位是0.当进行位运算的时候，如果两个都是1则是1，如果有一个为0则为0，所以能判断出奇偶性
 * 其他说明：暂无
 */
// function assert(n) {
//   if (n & 1) {
//     console.log("n是奇数");
//   } else {
//     console.log("n是偶数");
//   }
// }
// assert(3);
// 2、|运算
//   将运算数以二进制表示，对应位有一个为1，则结果为1，否则为0
//   使用场景示例：
//     对浮点数向下求整
// var num = Math.floor(1.1);
// var num = 1.1 | 0;
// 其实浮点数是不支持位运算的，所以会先把小数位丢弃，然后以整数进行位运算，而任何数与0进行按位或操作，结果都是它本身，就好像是对浮点数向下求整
// 3、^运算
//   将运算数以二进制表示，对应位相同为0，相异为1
//   异或满足交换律和结合律，数字与它本身进行异或操作，得到0；数字与0进行异或操作，得到它本身
//   举例：交换两个变量数字的值

//普通方式
// var num1 = 1,
//   num2 = 2,
//   temp;
// temp = num1;
// num1 = num2;
// num2 = temp;
// 第二种方式
// var num1 = 1,
//   num2 = 2;
// num1 = [num2, (num2 = num1)][0];
// console.log(num1);
// console.log(num2);

// 按位异或的方式
// var num1 = 1,
//   num2 = 2;
// num1 ^= num2;
// num2 ^= num1;
// num1 ^= num2;
// console.log(num1);
// console.log(num2);
// 4、~运算
//   将操作数转换为二进制数，然后按位求反
//   浮点数是不支持位运算的，所以会先直接去除小数部分，转成整数再进行位运算，就好像是对浮点数向下求整
//   ~~可以进行类型转换，位运算会默认将非数字类型转换成数字类型再进行运算（转换结果为整数，直接去除小数部分）
// 举例：
// ~~true ==1
// ~~false ==0
// ~~"" == 0
// ~~'all'==0
// ~~'32all'==0
// ~~'all43'==0
// ~~[]==0
// ~~undefined==0
// ~~!undefined ==1
// ~~null ==0
// ~~!null==1
// ~~(5.9)==5
// ~~(5.2)==5
// ~~(-5.9)==-5
// 移位运算符：
//   移位运算符将操作数转换成二进制，然后向左或向右移动，超过的位丢弃，空出的位补0
//   例如：
//     2向前移动1位变成4，利用这个特性可以做乘法运算
// 2<<1 = 4
// 3<<1 = 6
// 4<<1 = 8
// 同理>>则可以做除法运算
// 任何小数把它>>0可以取整
// 如3.14159>>0=3
// 其默认将非数字类型的转换为数字类型再做运算的性质与~~，|0一样
